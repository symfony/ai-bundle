<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Config\Definition\Configurator;

use Codewithkyrian\ChromaDB\Client as ChromaDbClient;
use MongoDB\Client as MongoDbClient;
use Probots\Pinecone\Client as PineconeClient;
use Symfony\AI\Platform\Bridge\OpenAi\PlatformFactory;
use Symfony\AI\Platform\PlatformInterface;
use Symfony\AI\Store\Document\VectorizerInterface;
use Symfony\AI\Store\StoreInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

return static function (DefinitionConfigurator $configurator): void {
    $configurator->rootNode()
        ->children()
            ->arrayNode('platform')
                ->children()
                    ->arrayNode('anthropic')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                            ->scalarNode('version')->defaultNull()->end()
                        ->end()
                    ->end()
                    ->arrayNode('azure')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('api_key')->isRequired()->end()
                                ->scalarNode('base_url')->isRequired()->end()
                                ->scalarNode('deployment')->isRequired()->end()
                                ->scalarNode('api_version')->info('The used API version')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('eleven_labs')
                        ->children()
                            ->scalarNode('host')->end()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('gemini')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('vertexai')
                        ->children()
                            ->scalarNode('location')->isRequired()->end()
                            ->scalarNode('project_id')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('openai')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                            ->scalarNode('region')
                                ->defaultNull()
                                ->validate()
                                    ->ifNotInArray([null, PlatformFactory::REGION_EU, PlatformFactory::REGION_US])
                                    ->thenInvalid('The region must be either "EU" (https://eu.api.openai.com), "US" (https://us.api.openai.com) or null (https://api.openai.com)')
                                ->end()
                                ->info('The region for OpenAI API (EU, US, or null for default)')
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('mistral')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('openrouter')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('lmstudio')
                        ->children()
                            ->scalarNode('host_url')->defaultValue('http://127.0.0.1:1234')->end()
                        ->end()
                    ->end()
                    ->arrayNode('ollama')
                        ->children()
                            ->scalarNode('host_url')->defaultValue('http://127.0.0.1:11434')->end()
                        ->end()
                    ->end()
                    ->arrayNode('cerebras')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('voyage')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                    ->arrayNode('perplexity')
                        ->children()
                            ->scalarNode('api_key')->isRequired()->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->arrayNode('agent')
                ->useAttributeAsKey('name')
                ->arrayPrototype()
                    ->children()
                        ->scalarNode('platform')
                            ->info('Service name of platform')
                            ->defaultValue(PlatformInterface::class)
                        ->end()
                        ->booleanNode('track_token_usage')
                            ->info('Enable tracking of token usage for the agent')
                            ->defaultTrue()
                        ->end()
                        ->arrayNode('model')
                            ->children()
                                ->scalarNode('class')
                                    ->isRequired()
                                    ->validate()
                                        ->ifTrue(function ($v) {
                                            return !is_a($v, \Symfony\AI\Platform\Model::class, true);
                                        })
                                        ->thenInvalid('The model class "%s" must extend Symfony\AI\Platform\Model.')
                                    ->end()
                                ->end()
                                ->scalarNode('name')->defaultNull()->end()
                                ->arrayNode('options')
                                    ->variablePrototype()->end()
                                ->end()
                            ->end()
                        ->end()
                        ->booleanNode('structured_output')->defaultTrue()->end()
                        ->variableNode('memory')
                            ->info('Memory configuration: string for static memory, or array with "service" key for service reference')
                            ->defaultNull()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return \is_string($v) && '' === $v;
                                })
                                ->thenInvalid('Memory cannot be empty.')
                            ->end()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return \is_array($v) && !isset($v['service']);
                                })
                                ->thenInvalid('Memory array configuration must contain a "service" key.')
                            ->end()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return \is_array($v) && isset($v['service']) && '' === $v['service'];
                                })
                                ->thenInvalid('Memory service cannot be empty.')
                            ->end()
                        ->end()
                        ->arrayNode('prompt')
                            ->info('The system prompt configuration')
                            ->beforeNormalization()
                                ->ifString()
                                ->then(function (string $v) {
                                    return ['text' => $v];
                                })
                            ->end()
                            ->beforeNormalization()
                                ->ifArray()
                                ->then(function (array $v) {
                                    if (!isset($v['text']) && !isset($v['include_tools'])) {
                                        throw new \InvalidArgumentException('Either "text" or "include_tools" must be configured for prompt.');
                                    }

                                    return $v;
                                })
                            ->end()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return \is_array($v) && '' === trim($v['text'] ?? '');
                                })
                                ->thenInvalid('The "text" cannot be empty.')
                            ->end()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return \is_array($v) && $v['enabled'] && !interface_exists(TranslatorInterface::class);
                                })
                                ->thenInvalid('System prompt translation is enabled, but no translator is present. Try running `composer require symfony/translation`.')
                            ->end()
                            ->children()
                                ->scalarNode('text')
                                    ->info('The system prompt text')
                                ->end()
                                ->booleanNode('include_tools')
                                    ->info('Include tool definitions at the end of the system prompt')
                                    ->defaultFalse()
                                ->end()
                                ->booleanNode('enable_translation')
                                    ->info('Enable translation for the system prompt')
                                    ->defaultFalse()
                                ->end()
                                ->scalarNode('translation_domain')
                                    ->info('The translation domain for the system prompt')
                                    ->defaultNull()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('tools')
                            ->addDefaultsIfNotSet()
                            ->treatFalseLike(['enabled' => false])
                            ->treatTrueLike(['enabled' => true])
                            ->treatNullLike(['enabled' => true])
                            ->beforeNormalization()
                                ->ifArray()
                                ->then(function (array $v) {
                                    return [
                                        'enabled' => $v['enabled'] ?? true,
                                        'services' => $v['services'] ?? $v,
                                    ];
                                })
                            ->end()
                            ->children()
                                ->booleanNode('enabled')->defaultTrue()->end()
                                ->arrayNode('services')
                                    ->arrayPrototype()
                                        ->children()
                                            ->scalarNode('service')->cannotBeEmpty()->end()
                                            ->scalarNode('agent')->cannotBeEmpty()->end()
                                            ->scalarNode('name')->end()
                                            ->scalarNode('description')->end()
                                            ->scalarNode('method')->end()
                                        ->end()
                                        ->beforeNormalization()
                                            ->ifString()
                                            ->then(function (string $v) {
                                                return ['service' => $v];
                                            })
                                        ->end()
                                        ->validate()
                                            ->ifTrue(static fn ($v) => !(empty($v['agent']) xor empty($v['service'])))
                                            ->thenInvalid('Either "agent" or "service" must be configured, and never both.')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->booleanNode('fault_tolerant_toolbox')->defaultTrue()->end()
                    ->end()
                ->end()
            ->end()
            ->arrayNode('store')
                ->children()
                    ->arrayNode('azure_search')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->isRequired()->end()
                                ->scalarNode('api_key')->isRequired()->end()
                                ->scalarNode('index_name')->isRequired()->end()
                                ->scalarNode('api_version')->isRequired()->end()
                                ->scalarNode('vector_field')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('cache')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('service')->cannotBeEmpty()->defaultValue('cache.app')->end()
                                ->scalarNode('cache_key')->end()
                                ->scalarNode('strategy')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('chroma_db')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('client')->cannotBeEmpty()->defaultValue(ChromaDbClient::class)->end()
                                ->scalarNode('collection')->isRequired()->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('clickhouse')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('dsn')->cannotBeEmpty()->end()
                                ->scalarNode('http_client')->cannotBeEmpty()->end()
                                ->scalarNode('database')->isRequired()->cannotBeEmpty()->end()
                                ->scalarNode('table')->isRequired()->cannotBeEmpty()->end()
                            ->end()
                            ->validate()
                                ->ifTrue(static fn ($v) => !isset($v['dsn']) && !isset($v['http_client']))
                                ->thenInvalid('Either "dsn" or "http_client" must be configured.')
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('cloudflare')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('account_id')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->cannotBeEmpty()->end()
                                ->scalarNode('index_name')->cannotBeEmpty()->end()
                                ->integerNode('dimensions')->end()
                                ->scalarNode('metric')->end()
                                ->scalarNode('endpoint_url')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('meilisearch')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->cannotBeEmpty()->end()
                                ->scalarNode('index_name')->cannotBeEmpty()->end()
                                ->scalarNode('embedder')->end()
                                ->scalarNode('vector_field')->end()
                                ->scalarNode('dimensions')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('memory')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('strategy')->cannotBeEmpty()->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('milvus')
                    ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->isRequired()->end()
                                ->scalarNode('database')->isRequired()->end()
                                ->scalarNode('collection')->isRequired()->end()
                                ->scalarNode('vector_field')->end()
                                ->scalarNode('dimensions')->end()
                                ->scalarNode('metric_type')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('mongodb')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('client')->cannotBeEmpty()->defaultValue(MongoDbClient::class)->end()
                                ->scalarNode('database')->isRequired()->end()
                                ->scalarNode('collection')->isRequired()->end()
                                ->scalarNode('index_name')->isRequired()->end()
                                ->scalarNode('vector_field')->end()
                                ->booleanNode('bulk_write')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('neo4j')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('username')->cannotBeEmpty()->end()
                                ->scalarNode('password')->cannotBeEmpty()->end()
                                ->scalarNode('database')->cannotBeEmpty()->end()
                                ->scalarNode('vector_index_name')->cannotBeEmpty()->end()
                                ->scalarNode('node_name')->cannotBeEmpty()->end()
                                ->scalarNode('vector_field')->end()
                                ->scalarNode('dimensions')->end()
                                ->scalarNode('distance')->end()
                                ->booleanNode('quantization')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('pinecone')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('client')->cannotBeEmpty()->defaultValue(PineconeClient::class)->end()
                                ->scalarNode('namespace')->end()
                                ->arrayNode('filter')
                                    ->scalarPrototype()->end()
                                ->end()
                                ->integerNode('top_k')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('qdrant')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->cannotBeEmpty()->end()
                                ->scalarNode('collection_name')->cannotBeEmpty()->end()
                                ->scalarNode('dimensions')->end()
                                ->scalarNode('distance')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('surreal_db')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('username')->cannotBeEmpty()->end()
                                ->scalarNode('password')->cannotBeEmpty()->end()
                                ->scalarNode('namespace')->cannotBeEmpty()->end()
                                ->scalarNode('database')->cannotBeEmpty()->end()
                                ->scalarNode('table')->end()
                                ->scalarNode('vector_field')->end()
                                ->scalarNode('strategy')->end()
                                ->scalarNode('dimensions')->end()
                                ->booleanNode('namespaced_user')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('typesense')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->isRequired()->end()
                                ->scalarNode('collection')->isRequired()->end()
                                ->scalarNode('vector_field')->end()
                                ->scalarNode('dimensions')->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('weaviate')
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('endpoint')->cannotBeEmpty()->end()
                                ->scalarNode('api_key')->isRequired()->end()
                                ->scalarNode('collection')->isRequired()->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->arrayNode('vectorizer')
                ->info('Vectorizers for converting strings to Vector objects and transforming TextDocument arrays to VectorDocument arrays')
                ->useAttributeAsKey('name')
                ->arrayPrototype()
                    ->children()
                        ->scalarNode('platform')
                            ->info('Service name of platform')
                            ->defaultValue(PlatformInterface::class)
                        ->end()
                        ->arrayNode('model')
                            ->children()
                                ->scalarNode('class')
                                    ->isRequired()
                                    ->validate()
                                        ->ifTrue(function ($v) {
                                            return !is_a($v, \Symfony\AI\Platform\Model::class, true);
                                        })
                                        ->thenInvalid('The model class "%s" must extend Symfony\AI\Platform\Model.')
                                    ->end()
                                ->end()
                                ->scalarNode('name')->defaultNull()->end()
                                ->arrayNode('options')
                                    ->variablePrototype()->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->arrayNode('indexer')
                ->useAttributeAsKey('name')
                ->arrayPrototype()
                    ->children()
                        ->scalarNode('loader')
                            ->info('Service name of loader')
                            ->isRequired()
                        ->end()
                        ->variableNode('source')
                            ->info('Source identifier (file path, URL, etc.) or array of sources')
                            ->defaultNull()
                        ->end()
                        ->arrayNode('transformers')
                            ->info('Array of transformer service names')
                            ->scalarPrototype()->end()
                            ->defaultValue([])
                        ->end()
                        ->scalarNode('vectorizer')
                            ->info('Service name of vectorizer')
                            ->defaultValue(VectorizerInterface::class)
                        ->end()
                        ->scalarNode('store')
                            ->info('Service name of store')
                            ->defaultValue(StoreInterface::class)
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end()
    ;
};
